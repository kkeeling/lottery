# Generated by Django 2.2 on 2021-06-02 14:21

from django.db import migrations, models
import django.db.models.deletion
import tagulous.models.fields
import tagulous.models.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dk_name', models.CharField(blank=True, max_length=255, null=True)),
                ('four4four_name', models.CharField(blank=True, max_length=255, null=True)),
                ('awesemo_name', models.CharField(blank=True, max_length=255, null=True)),
                ('fc_name', models.CharField(blank=True, max_length=255, null=True)),
                ('tda_name', models.CharField(blank=True, max_length=255, null=True)),
                ('fd_name', models.CharField(blank=True, max_length=255, null=True)),
                ('fdraft_name', models.CharField(blank=True, max_length=255, null=True)),
                ('ss_name', models.CharField(blank=True, max_length=255, null=True)),
                ('yahoo_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Alias',
                'verbose_name_plural': 'Aliases',
            },
        ),
        migrations.CreateModel(
            name='ContestImportSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site', models.CharField(choices=[('draftkings', 'DraftKings'), ('fanduel', 'Fanduel'), ('yahoo', 'Yahoo')], default='fanduel', max_length=50)),
                ('sheet', models.FileField(upload_to='uploads/contest')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_team', models.CharField(max_length=4)),
                ('away_team', models.CharField(max_length=4)),
                ('game_date', models.DateTimeField()),
                ('game_total', models.DecimalField(decimal_places=2, max_digits=4)),
                ('home_spread', models.DecimalField(decimal_places=2, max_digits=4)),
                ('away_spread', models.DecimalField(decimal_places=2, max_digits=4)),
                ('home_implied', models.DecimalField(decimal_places=2, max_digits=4)),
                ('away_implied', models.DecimalField(decimal_places=2, max_digits=4)),
            ],
        ),
        migrations.CreateModel(
            name='Slate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Slate')),
                ('site', models.CharField(choices=[('draftkings', 'DraftKings'), ('fanduel', 'Fanduel'), ('yahoo', 'Yahoo')], default='fanduel', max_length=50)),
                ('is_main_slate', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='SlateBuild',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('used_in_contests', models.BooleanField(default=False, verbose_name='Used')),
                ('balance_rbs', models.BooleanField(default=False)),
                ('lineup_start_number', models.IntegerField(default=1)),
                ('top_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='top')),
                ('total_lineups', models.PositiveIntegerField(verbose_name='total')),
                ('total_cashes', models.PositiveIntegerField(blank=True, null=True, verbose_name='cashes')),
                ('total_one_pct', models.PositiveIntegerField(blank=True, null=True, verbose_name='1%')),
                ('total_half_pct', models.PositiveIntegerField(blank=True, null=True, verbose_name='0.5%')),
                ('great_build', models.BooleanField(default=False, verbose_name='gb')),
                ('binked', models.BooleanField(default=False, help_text='Finished 1st, 2nd, or 3rd', verbose_name='bink')),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Slate Build',
                'verbose_name_plural': 'Slate Builds',
            },
        ),
        migrations.CreateModel(
            name='SlateBuildConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('site', models.CharField(choices=[('draftkings', 'DraftKings'), ('fanduel', 'Fanduel'), ('yahoo', 'Yahoo')], default='fanduel', max_length=50)),
                ('game_stack_size', models.IntegerField(default=4)),
                ('num_players_vs_dst', models.IntegerField(default=0)),
                ('max_dst_exposure', models.DecimalField(decimal_places=2, default=0.15, max_digits=2)),
                ('allow_rbs_from_same_game', models.BooleanField(default=False)),
                ('allow_rb_qb_from_same_team', models.BooleanField(default=False)),
                ('allow_rb_qb_from_opp_team', models.BooleanField(default=False)),
                ('allow_dst_rb_stack', models.BooleanField(default=True)),
                ('randomness', models.DecimalField(decimal_places=2, default=0.3, max_digits=2)),
                ('use_similarity_scores', models.BooleanField(default=False)),
                ('use_iseo', models.BooleanField(default=True, help_text='When true, players within a stack are exposed proportional to their projection relative to total stack projection')),
                ('use_iseo_plus', models.BooleanField(default=True, help_text='When true, stacks will be pre-made and balanced such that the number of lineups for each stack is proportional to the stack projection relative to all stacks')),
                ('use_iseo_rbs', models.BooleanField(default=True, help_text='When true, rbs exposure will be balanced by using adjusted opportunity and running back groups')),
                ('uniques', models.IntegerField(default=1)),
                ('min_salary', models.IntegerField(default=59000)),
                ('allow_rb_as_flex', models.BooleanField(default=True)),
                ('allow_wr_as_flex', models.BooleanField(default=True)),
                ('allow_te_as_flex', models.BooleanField(default=False)),
                ('allow_rb_in_qb_stack', models.BooleanField(default=True)),
                ('allow_wr_in_qb_stack', models.BooleanField(default=True)),
                ('allow_te_in_qb_stack', models.BooleanField(default=True)),
                ('allow_rb_in_opp_qb_stack', models.BooleanField(default=True)),
                ('allow_wr_in_opp_qb_stack', models.BooleanField(default=True)),
                ('allow_te_in_opp_qb_stack', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Build Config',
                'verbose_name_plural': 'Build Configs',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SlatePlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_id', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(max_length=255)),
                ('salary', models.IntegerField()),
                ('site_pos', models.CharField(max_length=5)),
                ('team', models.CharField(max_length=4)),
                ('fantasy_points', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('game', models.CharField(max_length=10)),
                ('ownership', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('slate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='nfl.Slate')),
            ],
            options={
                'ordering': ['-salary', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.PositiveIntegerField(verbose_name='Week #')),
                ('slate_year', models.PositiveIntegerField()),
                ('start', models.DateField()),
                ('end', models.DateField()),
            ],
            options={
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='Tagulous_SlateBuild_tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='SlateProjectionSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projection_sheet', models.FileField(upload_to='uploads/projections')),
                ('slate', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='projections', to='nfl.Slate')),
            ],
        ),
        migrations.CreateModel(
            name='SlatePlayerProjection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projection', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='Proj')),
                ('adjusted_opportunity', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='AO')),
                ('rb_group_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('rb_group', models.PositiveIntegerField(blank=True, null=True)),
                ('balanced_projection', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=5, null=True)),
                ('team_total', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='tt')),
                ('game_total', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='gt')),
                ('spread', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('in_play', models.BooleanField(default=True)),
                ('stack_only', models.BooleanField(default=False, help_text='Player is only in pool when stacked with QB or opposing QB', verbose_name='SO')),
                ('qb_stack_only', models.BooleanField(default=False, help_text='Generate QB stacks with this player', verbose_name='SwQB')),
                ('opp_qb_stack_only', models.BooleanField(default=False, help_text='Generate Opp QB stacks with this player', verbose_name='SwOQB')),
                ('at_most_one_in_stack', models.BooleanField(default=False, help_text='Generate stacks with only 1 of players with this designation', verbose_name='AM1')),
                ('at_least_one_in_lineup', models.BooleanField(default=False, help_text='At least one player with this designation should appear in every lineup', verbose_name='AL1')),
                ('at_least_two_in_lineup', models.BooleanField(default=False, help_text='At least two players with this designation should appear in every lineup', verbose_name='AL2')),
                ('locked', models.BooleanField(default=False)),
                ('slate_player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='projection', to='nfl.SlatePlayer')),
            ],
            options={
                'verbose_name': 'Player Projection',
                'verbose_name_plural': 'Player Projections',
                'ordering': ['-projection'],
            },
        ),
        migrations.CreateModel(
            name='SlatePlayerImportSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sheet_type', models.CharField(choices=[('site', 'Salary File'), ('fantasycruncher', 'FantasyCruncher Export')], default='site', max_length=255)),
                ('sheet', models.FileField(upload_to='uploads/salaries')),
                ('slate', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='salaries', to='nfl.Slate')),
            ],
        ),
        migrations.CreateModel(
            name='SlatePlayerActualsSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sheet', models.FileField(upload_to='uploads/actuals')),
                ('slate', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='actuals', to='nfl.Slate')),
            ],
        ),
        migrations.CreateModel(
            name='SlateGame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slates', to='nfl.Game')),
                ('slate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='nfl.Slate')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
            },
        ),
        migrations.CreateModel(
            name='SlateBuildStack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('build_order', models.PositiveIntegerField(default=1)),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('salary', models.PositiveIntegerField()),
                ('projection', models.DecimalField(decimal_places=2, max_digits=5)),
                ('count', models.PositiveIntegerField(default=0, help_text='# of lineups in which this stack should appear')),
                ('times_used', models.PositiveIntegerField(default=0)),
                ('actual', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stacks', to='nfl.SlateBuild', verbose_name='Build')),
                ('opp_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opp_stacks', to='nfl.SlatePlayerProjection')),
                ('player_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='p1_stacks', to='nfl.SlatePlayerProjection')),
                ('player_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='p2_stacks', to='nfl.SlatePlayerProjection')),
                ('qb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qb_stacks', to='nfl.SlatePlayerProjection')),
            ],
            options={
                'verbose_name': 'Stack',
                'verbose_name_plural': 'Stacks',
                'ordering': ['-qb__projection', '-count', '-projection'],
            },
        ),
        migrations.CreateModel(
            name='SlateBuildLineup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.IntegerField(default=0)),
                ('expected_lineup_order', models.PositiveIntegerField(default=0)),
                ('salary', models.PositiveIntegerField()),
                ('projection', models.DecimalField(decimal_places=2, max_digits=5)),
                ('actual', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lineups', to='nfl.SlateBuild', verbose_name='Build')),
                ('dst', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dst', to='nfl.SlatePlayerProjection')),
                ('flex', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flex', to='nfl.SlatePlayerProjection')),
                ('qb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qb', to='nfl.SlatePlayerProjection')),
                ('rb1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rb1', to='nfl.SlatePlayerProjection')),
                ('rb2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rb2', to='nfl.SlatePlayerProjection')),
                ('stack', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lineups', to='nfl.SlateBuildStack', verbose_name='Stack')),
                ('te', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='te', to='nfl.SlatePlayerProjection')),
                ('wr1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wr1', to='nfl.SlatePlayerProjection')),
                ('wr2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wr2', to='nfl.SlatePlayerProjection')),
                ('wr3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wr3', to='nfl.SlatePlayerProjection')),
            ],
            options={
                'verbose_name': 'Lineup',
                'verbose_name_plural': 'Lineups',
                'ordering': ['-actual', 'order_number', '-qb__projection'],
            },
        ),
        migrations.CreateModel(
            name='SlateBuildActualsLineup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expected_lineup_order', models.PositiveIntegerField(default=0)),
                ('salary', models.PositiveIntegerField()),
                ('actual', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals', to='nfl.SlateBuild', verbose_name='Build')),
                ('dst', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals_dst', to='nfl.SlatePlayerProjection')),
                ('flex', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals_flex', to='nfl.SlatePlayerProjection')),
                ('qb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals_qb', to='nfl.SlatePlayerProjection')),
                ('rb1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals_rb1', to='nfl.SlatePlayerProjection')),
                ('rb2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals_rb2', to='nfl.SlatePlayerProjection')),
                ('stack', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actuals', to='nfl.SlateBuildStack', verbose_name='Stack')),
                ('te', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals_te', to='nfl.SlatePlayerProjection')),
                ('wr1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals_wr1', to='nfl.SlatePlayerProjection')),
                ('wr2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals_wr2', to='nfl.SlatePlayerProjection')),
                ('wr3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actuals_wr3', to='nfl.SlatePlayerProjection')),
            ],
            options={
                'verbose_name': 'Actuals Lineup',
                'verbose_name_plural': 'Actuals Lineups',
                'ordering': ['-actual', '-qb__projection'],
            },
        ),
        migrations.AddField(
            model_name='slatebuild',
            name='configuration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='builds', to='nfl.SlateBuildConfig', verbose_name='Config'),
        ),
        migrations.AddField(
            model_name='slatebuild',
            name='slate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='builds', to='nfl.Slate'),
        ),
        migrations.AddField(
            model_name='slatebuild',
            name='tag',
            field=tagulous.models.fields.SingleTagField(_set_tag_meta=True, blank=True, force_lowercase=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nfl.Tagulous_SlateBuild_tag'),
        ),
        migrations.AddField(
            model_name='slate',
            name='week',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='slates', to='nfl.Week', verbose_name='Week'),
        ),
        migrations.AddField(
            model_name='game',
            name='week',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='nfl.Week'),
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('num_games', models.IntegerField(blank=True, null=True)),
                ('max_entrants', models.IntegerField()),
                ('max_entries', models.IntegerField()),
                ('mincash_payout', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('mincash_score', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('name', models.CharField(max_length=255)),
                ('places_paid', models.IntegerField(blank=True, null=True)),
                ('prize_pool', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('start_date', models.IntegerField(null=True)),
                ('total_entrants', models.IntegerField(blank=True, null=True)),
                ('winning_payout', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('winning_score', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('one_pct_score', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='1% Score')),
                ('one_pct_rank', models.IntegerField(blank=True, null=True, verbose_name='1% Rank')),
                ('half_pct_score', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='0.5% Score')),
                ('half_pct_rank', models.IntegerField(blank=True, null=True, verbose_name='0.5% Rank')),
                ('great_score', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Great Score')),
                ('slate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='nfl.Slate')),
            ],
            options={
                'ordering': ['slate', '-prize_pool'],
            },
        ),
        migrations.CreateModel(
            name='SlatePlayerBuildExposure',
            fields=[
            ],
            options={
                'verbose_name': 'Exposure',
                'verbose_name_plural': 'Exposures',
                'ordering': ['projection__rb_group', '-salary'],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('nfl.slateplayer',),
        ),
    ]
